{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","index.js"],"names":["Formulario","_ref","crearCita","_useState","useState","mascota","propietario","fecha","hora","sintomas","_useState2","Object","slicedToArray","cita","actualizarCita","_useState3","_useState4","error","actualizarError","actualizarState","e","objectSpread","defineProperty","target","name","value","react_default","a","createElement","react","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","components_Formulario","concat","toConsumableArray","map","components_Cita","key","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"qMAwIeA,EAnII,SAAAC,GAAiB,IAAfC,EAAeD,EAAfC,UAAeC,EAGHC,mBAAS,CACtCC,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,KARsBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GAG3BU,EAH2BH,EAAA,GAGrBI,EAHqBJ,EAAA,GAAAK,EAWAX,oBAAS,GAXTY,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAW3BE,EAX2BD,EAAA,GAWpBE,EAXoBF,EAAA,GAc5BG,EAAkB,SAAAC,GACtBN,EAAeH,OAAAU,EAAA,EAAAV,CAAA,GACVE,EADSF,OAAAW,EAAA,EAAAX,CAAA,GAEXS,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,UAKtBpB,EAAgDQ,EAAhDR,QAASC,EAAuCO,EAAvCP,YAAaC,EAA0BM,EAA1BN,MAAOC,EAAmBK,EAAnBL,KAAMC,EAAaI,EAAbJ,SAuC3C,OACEiB,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,wBAEEX,EAAQS,EAAAC,EAAAC,cAAA,KAAGE,UAAU,eAAb,qCAAmE,KAE7EJ,EAAAC,EAAAC,cAAA,QAEEG,SA5Ca,SAAAX,GACjBA,EAAEY,iBAGoB,KAAnB3B,EAAQ4B,QAAwC,KAAvB3B,EAAY2B,QAAkC,KAAjB1B,EAAM0B,QAAiC,KAAhBzB,EAAKyB,QAAqC,KAApBxB,EAASwB,QAO/Gf,GAAgB,GAIhBL,EAAKqB,GAAKC,cAKVjC,EAAUW,GAIVC,EAAe,CACbT,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,MAxBVS,GAAgB,KA0CdQ,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SACAQ,KAAK,OACLZ,KAAK,UACLM,UAAU,eACVO,YAAY,iBACZC,SAAUnB,EACVM,MAAOpB,IAGPqB,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,SACAQ,KAAK,OACLZ,KAAK,cACLM,UAAU,eACVO,YAAY,gCACZC,SAAUnB,EACVM,MAAOnB,IAGPoB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SACAQ,KAAK,OACLZ,KAAK,QACLM,UAAU,eACVQ,SAAUnB,EACVM,MAAOlB,IAGPmB,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SACAQ,KAAK,OACLZ,KAAK,OACLM,UAAU,eACVQ,SAAUnB,EACVM,MAAOjB,IAGPkB,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,YACEE,UAAU,eACVN,KAAK,WACLc,SAAUnB,EACZM,MAAOhB,IAGPiB,EAAAC,EAAAC,cAAA,UACEQ,KAAK,SACLN,UAAU,2CAFZ,mBClGOS,EAtBF,SAAAtC,GAAA,IAAEY,EAAFZ,EAAEY,KAAM2B,EAARvC,EAAQuC,aAAR,OACTd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,YAAOf,EAAKR,UACxBqB,EAAAC,EAAAC,cAAA,sBAAUF,EAAAC,EAAAC,cAAA,YAAOf,EAAKP,cACtBoB,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,YAAOf,EAAKN,QACtBmB,EAAAC,EAAAC,cAAA,kBAASF,EAAAC,EAAAC,cAAA,YAAOf,EAAKL,OACrBkB,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,YAAOf,EAAKJ,WAGzBiB,EAAAC,EAAAC,cAAA,UACEE,UAAU,+BACVW,QAAS,kBAAMD,EAAa3B,EAAKqB,MAFnC,mBCgESQ,MAvEf,WAGE,IAAIC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,UACjDJ,IACFA,EAAiB,IALN,IAAAxC,EAUiBC,mBAASuC,GAV1BjC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GAUN6C,EAVMtC,EAAA,GAUCuC,EAVDvC,EAAA,GAcbwC,oBAAW,WACNP,EACDG,aAAaK,QAAQ,QAASP,KAAKQ,UAAUJ,IAE7CF,aAAaK,QAAQ,QAASP,KAAKQ,UAAU,MAE9C,CAACJ,EAAOL,IAKX,IASMH,EAAe,SAAAN,GACnB,IAAMmB,EAAcL,EAAMM,OAAO,SAAAzC,GAAI,OAAIA,EAAKqB,KAAOA,IACrDe,EAAaI,IAKTE,EAA0B,IAAjBP,EAAMQ,OAAe,eAAiB,uBAGrD,OACI9B,EAAAC,EAAAC,cAACC,EAAA,SAAD,KAEEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACXJ,EAAAC,EAAAC,cAAC6B,EAAD,CACAvD,UA1BI,SAAAW,GAChBoC,EAAY,GAAAS,OAAA/C,OAAAgD,EAAA,EAAAhD,CACPqC,GADO,CAEVnC,SA0BMa,EAAAC,EAAAC,cAAA,OAAKE,UAAU,8BACXJ,EAAAC,EAAAC,cAAA,UAAK2B,GACJP,EAAMY,IAAI,SAAA/C,GAAI,OACfa,EAAAC,EAAAC,cAACiC,EAAD,CACIC,IAAKjD,EAAKqB,GACVrB,KAAMA,EACN2B,aAAcA,WC5DrBuB,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzC,EAAAC,EAAAC,cAACF,EAAAC,EAAMyC,WAAP,KACE1C,EAAAC,EAAAC,cAACyC,EAAD","file":"static/js/main.94b3a148.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { v4 as uuid } from 'uuid';\nimport PropTypes from 'prop-types'\n\n\nconst Formulario = ({crearCita}) => {\n\n  //crear State de citas\n  const [cita, actualizarCita] = useState({\n    mascota: '',\n    propietario: '',\n    fecha: '',\n    hora: '',\n    sintomas: ''\n  });\n\n  const [error, actualizarError ] = useState(false);\n\n  //funcion que se ejecuta cada que el usuario escribe en un input\n  const actualizarState = e => {\n    actualizarCita({\n      ...cita,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  //extraer los valores\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\n\n  //cuando el usuario presiona agregar cita\n  const submitCita = e => {\n    e.preventDefault();\n\n    //validar\n    if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '' ) {\n      actualizarError(true)\n      return;\n    }\n\n\n    //eliminar el mensaje previo\n    actualizarError(false)\n\n\n    //asignar un id\n    cita.id = uuid();\n\n\n\n    //crear la cita\n    crearCita(cita)\n\n\n    //reiniciar el form\n    actualizarCita({\n      mascota: '',\n      propietario: '',\n      fecha: '',\n      hora: '',\n      sintomas: ''\n    })\n\n  }\n\n\n\n  return ( \n    <Fragment>\n      <h2>Crear Cita</h2>\n\n      { error ? <p className='alert-error'>Todos los campos son obligatorios</p> : null }\n\n      <form\n      \n        onSubmit={submitCita}\n      \n      >\n        <label>Nombre Mascota</label>\n        <input \n        type='text'\n        name='mascota'\n        className='u-full-width'\n        placeholder='Nombre Mascota'\n        onChange={actualizarState}\n        value={mascota}\n        />\n\n        <label>Nombre Dueño</label>\n        <input \n        type='text'\n        name='propietario'\n        className='u-full-width'\n        placeholder='Nombre Dueño de la mascota'\n        onChange={actualizarState}\n        value={propietario}\n        />\n\n        <label>Fecha</label>\n        <input \n        type='date'\n        name='fecha'\n        className='u-full-width'\n        onChange={actualizarState}\n        value={fecha}\n        />\n\n        <label>Hora</label>\n        <input \n        type='time'\n        name='hora'\n        className='u-full-width'\n        onChange={actualizarState}\n        value={hora}\n        />\n\n        <label>Síntomas</label>\n        <textarea\n          className=\"u-full-width\"\n          name='sintomas'\n          onChange={actualizarState}\n        value={sintomas}\n        ></textarea>\n\n        <button\n          type='submit'\n          className='u-full-width button-primary agregarCita'\n        >Agregar Cita</button>\n      </form>\n    </Fragment>\n   );\n}\n \nFormulario.propTypes = {\n  crearCita: PropTypes.func.isRequired\n}\n\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types'\n\nconst Cita = ({cita, eliminarCita}) => ( \n    <div className='cita'>\n      <p>Mascota: <span>{cita.mascota}</span></p>\n      <p>Dueño: <span>{cita.propietario}</span></p>\n      <p>Fecha: <span>{cita.fecha}</span></p>\n      <p>Hora: <span>{cita.hora}</span></p>\n      <p>sintomas: <span>{cita.sintomas}</span></p>\n\n\n      <button\n        className='button eliminar u-full-width'\n        onClick={() => eliminarCita(cita.id)}\n      >Eliminar &times;</button>\n    </div>\n);\n\n\nCita.propTypes = {\n  cita: PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired\n}\n \nexport default Cita;","import React, {Fragment, useState, useEffect } from \"react\";\nimport Formulario from './components/Formulario';\nimport Cita from \"./components/Cita\";\n\n\nfunction App() {\n\n  //citas en localstorage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'))\n  if(!citasIniciales){\n    citasIniciales = []\n  }\n\n\n  //arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n\n  //use Effect para realizar ciertas operaciones cuando el state cambia\n  useEffect( () => {\n    if(citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]))\n    }\n  }, [citas, citasIniciales])\n\n  \n\n  //funcion que tome la cita actual y arregle la nueva\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas,\n      cita\n    ])\n  }\n\n\n  //funcion que elimina una cita por su id\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id)\n    guardarCitas(nuevasCitas)\n  }\n\n\n  //mensaje condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus Citas'\n\n\n  return (\n      <Fragment>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"one-half column\">\n                <Formulario \n                crearCita={crearCita}\n                />\n            </div>\n            <div className=\"one-half column listaCitas\">\n                <h2>{titulo}</h2>\n                {citas.map(cita => (\n                <Cita \n                    key={cita.id}\n                    cita={cita}\n                    eliminarCita={eliminarCita}\n                    />\n                    ))}\n            </div>\n          </div>\n        </div>\n\n      </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}